import type { Spacing } from '../types';
export interface InlineStackProps {
    /**
     * Specifies the block alignment. This affects the vertical flow of elements.
     * @defaultValue `leading`
     */
    blockAlignment?: 'leading' | 'center' | 'trailing' | 'baseline';
    /**
     * Specifies the inline alignment. This affects the horizontal flow of elements.
     * @defaultValue `leading`
     */
    inlineAlignment?: 'leading' | 'center' | 'trailing';
    /**
     * Adjust spacing between children.
     * @defaultValue 'base'
     **/
    spacing?: Spacing;
}
/**
 * Use to lay out a horizontal row of components.
 *
 * A stack is made of flexible items that wrap each of the stackâ€™s children. Options provide control of the alignment and spacing of the items in the stack.
 * Use `StackItem` to group multiple elements inside a `InlineStack` together.
 */
export declare const InlineStack: "InlineStack" & {
    readonly type?: "InlineStack" | undefined;
    readonly props?: InlineStackProps | undefined;
    readonly children?: true | undefined;
};
//# sourceMappingURL=InlineStack.d.ts.map